Phi.matrix[i,j] = Psi[i-j+1]*BC[j]
}
Psi[(i+1)] <- sum(Phi.matrix[i,])
}
## Generating linear filter over x_t "similar to MA representation for AR"
MA_rep <- matrix(data=NA, nrow=(obs+200), ncol=M.star)
for (i in 1:(obs+200)){
for (j in 1:M.star){
MA_rep[i,j] <- Psi[j]*x[M-(j-1)-(i-1)]
}
}
exo_var <- c()
exo_var <- MA_rep[,1]
MA_rep <- rowSums(MA_rep)
#MA_rep <- rev(MA_rep)
}
else{
MA_rep <- matrix(data=0, nrow=(obs+200),ncol=M.star)
exo_var <- c()
}
u <- matrix(data=NA, nrow=(obs+100+s), ncol=1)
U.mat <- u[(201+obs):(200+obs+s)] <- rep(1,s)
for (i in (obs+200):1){
if (length(nc_par) == 1){
AR <- nc_par * U.mat
}
else{
AR <- sum(t(nc_par*U.mat))
}
if (i == (obs+200)){AR <- 0}
u[i] <- AR + eps[i]
if (s == 1){
U.mat <- u[i]
}
else{
U.mat <- c(u[i], t(U.mat[1:(length(U.mat)-1)]))
U.mat <- t(U.mat)
}
}
y <- matrix(data=0, nrow=(obs+r+200), ncol=1)
Y <- y[1:r] <- rep(0,r)
for (i in 1:(obs+200)){
if (r == 1){
AR2 <- c_par * Y
}
else{
AR2 <- sum(t(c_par*Y))
}
if (i == 1){AR2 <- 0}
y[i+r] <- AR2 + u[i] + exo_par * MA_rep[i+r]
if (r == 1){
Y <- y[i+r]
}
else{
Y <- c(y[i+r], t(Y[1:(length(Y)-1)]))
Y <- t(Y)
}
}
u <- u[1:obs]
y <- y[(101+r):(obs+100+r)]
exo_var <- exo_var[(101+r):(obs+100+r)]
return(list(y = y, x = exo_var))
}
mixed.combine <- function(y,x,p_C,p_NC){
if (is.null(x)){
x <- "not"
}
sig_level = 0.05
est <- marx.t(y,x,p_C,p_NC)
residuals <- est$residuals
fitted.values <- y[(1+p_C):(length(y)-p_NC)] - residuals
inf <- inference(y,x,est$coef.c,est$coef.nc,est$coef.exo,est$coef.int,est$scale,est$df,sig_level)
coefficients <- c(est$coef.int,est$coef.c,est$coef.nc,est$coef.exo)
coefficients <- fBasics::vec(coefficients)
if(length(x) > 1){
if (p_C > 0 && p_NC > 0){
rownames(coefficients) <- c('int', paste('lag', 1:p_C), paste('lead', 1:p_NC), paste('exo', 1:NCOL(x)))
}
else if (p_C > 0 && p_NC == 0){
rownames(coefficients) <- c('int', paste('lag', 1:p_C), 'lead', paste('exo', 1:NCOL(x)))
}
else if (p_C == 0 && p_NC > 0){
rownames(coefficients) <- c('int', 'lag', paste('lead', 1:p_NC), paste('exo', 1:NCOL(x)))
}
else if (p_C == 0 && p_NC == 0){
rownames(coefficients) <- c('int', 'lag', 'lead', paste('exo', 1:NCOL(x)))
}
}
else{
if (p_C > 0 && p_NC > 0){
rownames(coefficients) <- c('int', paste('lag', 1:p_C), paste('lead', 1:p_NC), 'exo')
}
else if (p_C > 0 && p_NC == 0){
rownames(coefficients) <- c('int', paste('lag', 1:p_C), 'lead', 'exo')
}
else if (p_C == 0 && p_NC > 0){
rownames(coefficients) <- c('int', 'lag', paste('lead', 1:p_NC), 'exo')
}
else if (p_C == 0 && p_NC == 0){
rownames(coefficients) <- c('int', 'lag', 'lead', 'exo')
}
}
se <- c(inf$se.int, inf$se.c, inf$se.nc, inf$se.exo)
if (length(x) > 1){
degree <- NROW(est$residuals) - (p_C + p_NC + NCOL(x) + 1)
}
else{
degree <- NROW(est$residuals) - (p_C + p_NC + 1)
}
return(list(coefficients = coefficients, se = se, df.residual = degree, residuals= residuals, fitted.values = fitted.values))
}
#' The pseudo-causal model function
#'
#' This function allows you to estimate pseudo-causal ARX models by OLS (compatible with most functions in lm() class).
#' @aliases   pseudo
#'            pseudo.default
#'            print.pseudo
#'            summary.pseudo
#' @param y      Data vector of time series observations.
#' @param x      Matrix of data (every column represents one time series). Specify NULL or "not" if not wanted.
#' @param p      Number of lags to be included.
#' @param object An object of the class "pseudo"
#' @param ...    Other arguments
#' @keywords pseudo-causal
#' @keywords estimation
#' @examples
#' data <- sim.marx(c('t',1,1), c('t',1,1),100,0.5,0.4,0.3)
#' object <- pseudo(data$y, data$x, 2)
#' class(object) <- "pseudo"
#' summary(object)
#' @rdname pseudo
#' @export pseudo
pseudo <- function(y,x,p){ UseMethod("pseudo")}
#' @return An object of class \code{"pseudo"} is a list containing the following components:
#' @return \item{coefficients}{Vector of estimated coefficients.}
#' @return \item{coef.auto}{Vector of estimated autoregressive parameters.}
#' @return \item{coef.exo}{Vector of estimated exogenous parameters.}
#' @return \item{mse}{Mean squared error.}
#' @return \item{residuals}{Residuals.}
#' @return \item{loglikelihood}{Value of the loglikelihood.}
#' @return \item{fitted.values}{Fitted values.}
#' @return \item{df}{Degrees of freedom.}
#' @return \item{vcov}{Variance-covariance matrix of residuals.}
#'
#' @rdname pseudo
#' @method pseudo default
#' @S3method pseudo default
pseudo.default <- function(y,x,p){
if (is.null(x)){
x <- "not"
}
est <- arx.ls(y,x,p)
est$call <- match.call();
class(est) <- "pseudo"
est
}
#'
#' @rdname pseudo
#' @method print pseudo
#' @S3method print pseudo
print.pseudo <- function(x,...){
cat("Call:\n")
print(x$call)
cat("\n Coefficients:\n")
print(x$coefficients)
}
#'
#' @rdname pseudo
#' @method summary pseudo
#' @S3method summary pseudo
summary.pseudo <- function(object,...){
se <- sqrt(diag(object$vcov))
tval <- stats::coef(object) / se
TAB <- cbind(Estimate = stats::coef(object),
StdErr = se,
t.value = tval,
p.value = 2*stats::pt(-abs(tval),df=object$df))
colnames(TAB) <- c("Estimate", "Std.Err", "t value", "p value")
res <- list(call=object$call, coefficients = TAB)
class(res) <- "summary.pseudo"
res
}
#'
pseudo <- function(y,x,p){ UseMethod("pseudo")}
pseudo.default <- function(y,x,p){
if (is.null(x)){
x <- "not"
}
est <- arx.ls(y,x,p)
est$call <- match.call();
class(est) <- "pseudo"
est
}
print.pseudo <- function(x,...){
cat("Call:\n")
print(x$call)
cat("\n Coefficients:\n")
print(x$coefficients)
}
summary.pseudo <- function(object,...){
se <- sqrt(diag(object$vcov))
tval <- stats::coef(object) / se
TAB <- cbind(Estimate = stats::coef(object),
StdErr =  se,
t.value = tval,
p.value = 2*stats::pt(-abs(tval),df=object$df))
colnames(TAB) <- c("Estimate", "Std.Err", "t value", "p value")
res <- list(call=object$call, coefficients = TAB)
class(res) <- "summary.pseudo"
res
}
#' The MARX estimation function
#'
#' This function allows you to estimate mixed causal-noncausal MARX models by t-MLE (compatible with most functions in lm() class).
#' @aliases    mixed
#'             mixed.default
#'             print.mixed
#'             summary.mixed
#' @param y      Data vector of time series observations.
#' @param x      Matrix of data (every column represents one time series). Specify NULL or "not" if not wanted.
#' @param p_C    Number of lags to be included.
#' @param p_NC   Number of leads to be included.
#' @param object An object of the class "mixed".
#' @param ...    Other parameters.
#' @keywords causal-noncausal
#' @keywords estimation
#' @examples
#' data <- sim.marx(c('t',1,1), c('t',1,1),100,0.5,0.4,0.3)
#' object <- mixed(data$y, data$x, 1, 1)
#' class(object) <- "mixed"
#' summary(object)
#' @rdname mixed
#' @export mixed
mixed <- function(y,x,p_C,p_NC){ UseMethod("mixed")}
#' @return An object of class \code{"mixed"} is a list containing the following components:
#' @return \item{coefficients}{Vector of estimated coefficients.}
#' @return \item{se}{Standard errors of estimated coefficients.}
#' @return \item{df.residual}{Degrees of freedom residuals.}
#' @return \item{residuals}{Residuals.}
#' @return \item{fitted.values}{Fitted values.}
#'
#' @rdname mixed
#' @method mixed default
#' @S3method mixed default
mixed.default <- function(y,x,p_C,p_NC){
if (is.null(x)){
x <- "not"
}
est <- mixed.combine(y,x,p_C,p_NC);
est$call <- match.call();
class(est) <- "mixed"
est
}
#'
#' @rdname mixed
#' @method print mixed
#' @s3method print mixed
print.mixed <- function(x,...){
cat("Call:\n")
print(x$call)
cat("\n Coefficients:\n")
print(x$coefficients)
}
#'
#' @rdname mixed
#' @method summary mixed
#' @S3method summary mixed
summary.mixed <- function(object2,...){
tval <- stats::coef(object2) / object2$se
TAB <- cbind(Estimate = stats::coef(object2),
StdErr = object2$se,
t.value = tval,
p.value = 2*stats::pt(-abs(tval),df=object2$df.residual))
colnames(TAB) <- c("Estimate", "Std.Err", "t value", "p value")
res <- list(call=object2$call, coefficients = TAB)
class(res) <- "summary.mixed"
res
}
#'
mixed <- function(y,x,p_C,p_NC){ UseMethod("mixed")}
mixed.default <- function(y,x,p_C,p_NC){
if (is.null(x)){
x <- "not"
}
est <- mixed.combine(y,x,p_C,p_NC);
est$call <- match.call();
class(est) <- "mixed"
est
}
print.mixed <- function(x,...){
cat("Call:\n")
print(x$call)
cat("\n Coefficients:\n")
print(x$coefficients)
}
summary.mixed <- function(object2,...){
tval <- stats::coef(object2) / object2$se
TAB <- cbind(Estimate = stats::coef(object2),
StdErr = object2$se,
t.value = tval,
p.value = 2*stats::pt(-abs(tval),df=object2$df.residual))
colnames(TAB) <- c("Estimate", "Std.Err", "t value", "p value")
res <- list(call=object2$call, coefficients = TAB)
class(res) <- "summary.mixed"
res
}
library(MARX)
library(MARX)
library(MARX)
mixed.combine <- function(y,x,p_C,p_NC){
if (is.null(x)){
x <- "not"
}
sig_level = 0.05
est <- marx.t(y,x,p_C,p_NC)
residuals <- est$residuals
fitted.values <- y[(1+p_C):(length(y)-p_NC)] - residuals
inf <- inference(y,x,est$coef.c,est$coef.nc,est$coef.exo,est$coef.int,est$scale,est$df,sig_level)
coefficients <- c(est$coef.int,est$coef.c,est$coef.nc,est$coef.exo)
coefficients <- fBasics::vec(coefficients)
if(length(x) > 1){
if (p_C > 0 && p_NC > 0){
rownames(coefficients) <- c('int', paste('lag', 1:p_C), paste('lead', 1:p_NC), paste('exo', 1:NCOL(x)))
}
else if (p_C > 0 && p_NC == 0){
rownames(coefficients) <- c('int', paste('lag', 1:p_C), 'lead', paste('exo', 1:NCOL(x)))
}
else if (p_C == 0 && p_NC > 0){
rownames(coefficients) <- c('int', 'lag', paste('lead', 1:p_NC), paste('exo', 1:NCOL(x)))
}
else if (p_C == 0 && p_NC == 0){
rownames(coefficients) <- c('int', 'lag', 'lead', paste('exo', 1:NCOL(x)))
}
}
else{
if (p_C > 0 && p_NC > 0){
rownames(coefficients) <- c('int', paste('lag', 1:p_C), paste('lead', 1:p_NC), 'exo')
}
else if (p_C > 0 && p_NC == 0){
rownames(coefficients) <- c('int', paste('lag', 1:p_C), 'lead', 'exo')
}
else if (p_C == 0 && p_NC > 0){
rownames(coefficients) <- c('int', 'lag', paste('lead', 1:p_NC), 'exo')
}
else if (p_C == 0 && p_NC == 0){
rownames(coefficients) <- c('int', 'lag', 'lead', 'exo')
}
}
se <- c(inf$se.int, inf$se.c, inf$se.nc, inf$se.exo)
if (length(x) > 1){
degree <- NROW(est$residuals) - (p_C + p_NC + NCOL(x) + 1)
}
else{
degree <- NROW(est$residuals) - (p_C + p_NC + 1)
}
return(list(coefficients = coefficients, se = se, df.residual = degree, residuals= residuals, fitted.values = fitted.values))
}
#' The pseudo-causal model function
#'
#' This function allows you to estimate pseudo-causal ARX models by OLS (compatible with most functions in lm() class).
#' @aliases   pseudo
#'            pseudo.default
#'            print.pseudo
#'            summary.pseudo
#' @param y      Data vector of time series observations.
#' @param x      Matrix of data (every column represents one time series). Specify NULL or "not" if not wanted.
#' @param p      Number of lags to be included.
#' @param object An object of the class "pseudo"
#' @param ...    Other arguments
#' @keywords pseudo-causal
#' @keywords estimation
#' @examples
#' data <- sim.marx(c('t',1,1), c('t',1,1),100,0.5,0.4,0.3)
#' object <- pseudo(data$y, data$x, 2)
#' class(object) <- "pseudo"
#' summary(object)
#' @rdname pseudo
#' @export pseudo
pseudo <- function(y,x,p){ UseMethod("pseudo")}
#' @return An object of class \code{"pseudo"} is a list containing the following components:
#' @return \item{coefficients}{Vector of estimated coefficients.}
#' @return \item{coef.auto}{Vector of estimated autoregressive parameters.}
#' @return \item{coef.exo}{Vector of estimated exogenous parameters.}
#' @return \item{mse}{Mean squared error.}
#' @return \item{residuals}{Residuals.}
#' @return \item{loglikelihood}{Value of the loglikelihood.}
#' @return \item{fitted.values}{Fitted values.}
#' @return \item{df}{Degrees of freedom.}
#' @return \item{vcov}{Variance-covariance matrix of residuals.}
#'
#' @rdname pseudo
#' @method pseudo default
#' @S3method pseudo default
pseudo.default <- function(y,x,p){
if (is.null(x)){
x <- "not"
}
est <- arx.ls(y,x,p)
est$call <- match.call();
class(est) <- "pseudo"
est
}
#'
#' @rdname pseudo
#' @method print pseudo
#' @S3method print pseudo
print.pseudo <- function(x,...){
cat("Call:\n")
print(x$call)
cat("\n Coefficients:\n")
print(x$coefficients)
}
#'
pseudo <- function(y,x,p){ UseMethod("pseudo")}
pseudo.default <- function(y,x,p){
if (is.null(x)){
x <- "not"
}
est <- arx.ls(y,x,p)
est$call <- match.call();
class(est) <- "pseudo"
est
}
print.pseudo <- function(x,...){
cat("Call:\n")
print(x$call)
cat("\n Coefficients:\n")
print(x$coefficients)
}
#' The MARX estimation function
#'
#' This function allows you to estimate mixed causal-noncausal MARX models by t-MLE (compatible with most functions in lm() class).
#' @aliases    mixed
#'             mixed.default
#'             print.mixed
#'             summary.mixed
#' @param y      Data vector of time series observations.
#' @param x      Matrix of data (every column represents one time series). Specify NULL or "not" if not wanted.
#' @param p_C    Number of lags to be included.
#' @param p_NC   Number of leads to be included.
#' @param object An object of the class "mixed".
#' @param ...    Other parameters.
#' @keywords causal-noncausal
#' @keywords estimation
#' @examples
#' data <- sim.marx(c('t',1,1), c('t',1,1),100,0.5,0.4,0.3)
#' object <- mixed(data$y, data$x, 1, 1)
#' class(object) <- "mixed"
#' summary(object)
#' @rdname mixed
#' @export mixed
mixed <- function(y,x,p_C,p_NC){ UseMethod("mixed")}
#' @return An object of class \code{"mixed"} is a list containing the following components:
#' @return \item{coefficients}{Vector of estimated coefficients.}
#' @return \item{se}{Standard errors of estimated coefficients.}
#' @return \item{df.residual}{Degrees of freedom residuals.}
#' @return \item{residuals}{Residuals.}
#' @return \item{fitted.values}{Fitted values.}
#'
#' @rdname mixed
#' @method mixed default
#' @S3method mixed default
mixed.default <- function(y,x,p_C,p_NC){
if (is.null(x)){
x <- "not"
}
est <- mixed.combine(y,x,p_C,p_NC);
est$call <- match.call();
class(est) <- "mixed"
est
}
#'
#' @rdname mixed
#' @method print mixed
#' @s3method print mixed
print.mixed <- function(x,...){
cat("Call:\n")
print(x$call)
cat("\n Coefficients:\n")
print(x$coefficients)
}
#'
mixed <- function(y,x,p_C,p_NC){ UseMethod("mixed")}
mixed.default <- function(y,x,p_C,p_NC){
if (is.null(x)){
x <- "not"
}
est <- mixed.combine(y,x,p_C,p_NC);
est$call <- match.call();
class(est) <- "mixed"
est
}
print.mixed <- function(x,...){
cat("Call:\n")
print(x$call)
cat("\n Coefficients:\n")
print(x$coefficients)
}
library(MARX)
library(MARX)
library(MARX)
.libPaths("C:/Users/Sean/Documents/R/win-library/3.4")
library(MARX
)
set.seed(9999)
sim.data <- sim.marx(c('t',3,0), c('t',2,1), 200, c(0.2,0.3), 0.7, 0.5)
y <- sim.data$y
x <- sim.data$x
pseudo.model <- pseudo(y, x, 3)
summary(pseudo.model)
final.model <- mixed(y, x, 2, 1)
summary(final.model)
